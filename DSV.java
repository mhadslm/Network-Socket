/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ds;

import java.awt.Color;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import javax.swing.JFileChooser;

/**
 *
 * @author Muhammad
 */
public class DSV extends javax.swing.JFrame {

    private File msgFile;
    private File sgnFile;
    private File pvkFile;
    private File pbkFile;

    private String filesPath;

    public DSV() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        keysPathTField = new javax.swing.JTextField();
        keysPathSelector = new javax.swing.JButton();
        keysGenerator = new javax.swing.JButton();
        genResultLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        pbkPathTField = new javax.swing.JTextField();
        sgnPathTField = new javax.swing.JTextField();
        mssgPathTField = new javax.swing.JTextField();
        sgnselector = new javax.swing.JButton();
        pbkSelector = new javax.swing.JButton();
        mssgFileSelector = new javax.swing.JButton();
        verifier = new javax.swing.JButton();
        vResultLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        msgFileLabel = new javax.swing.JLabel();
        msgPathTField = new javax.swing.JTextField();
        filesLabel = new javax.swing.JLabel();
        signPathTField = new javax.swing.JTextField();
        sResultLabel = new javax.swing.JLabel();
        msgFileSelector = new javax.swing.JButton();
        sgnPathSelector = new javax.swing.JButton();
        signer = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        pvkPathTField = new javax.swing.JTextField();
        pvkFileSelector = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setText("Generating Private and Public Keys");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jLabel6.setText("Destination Folder");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        keysPathTField.setText("Select a destination folder to save the keys");
        keysPathTField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                keysPathTFieldMouseClicked(evt);
            }
        });
        jPanel3.add(keysPathTField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 360, -1));

        keysPathSelector.setText("Select");
        keysPathSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keysPathSelectorActionPerformed(evt);
            }
        });
        jPanel3.add(keysPathSelector, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 50, -1, -1));

        keysGenerator.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        keysGenerator.setText("Generate Key");
        keysGenerator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keysGeneratorActionPerformed(evt);
            }
        });
        jPanel3.add(keysGenerator, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 100, 150, 50));

        genResultLabel.setText("Generation Result: ");
        jPanel3.add(genResultLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 550, 70));

        jTabbedPane1.addTab("Generating Keys", jPanel3);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("file (message)");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        jLabel2.setText("public key");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        jLabel3.setText("signature");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        jLabel4.setText("Select files");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        pbkPathTField.setEditable(false);
        pbkPathTField.setText("select the public key file");
        pbkPathTField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pbkPathTFieldMouseClicked(evt);
            }
        });
        jPanel1.add(pbkPathTField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 400, -1));

        sgnPathTField.setEditable(false);
        sgnPathTField.setText("select signature file");
        sgnPathTField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sgnPathTFieldMouseClicked(evt);
            }
        });
        jPanel1.add(sgnPathTField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, 400, -1));

        mssgPathTField.setEditable(false);
        mssgPathTField.setText("select the message file");
        mssgPathTField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mssgPathTFieldMouseClicked(evt);
            }
        });
        jPanel1.add(mssgPathTField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, 400, -1));

        sgnselector.setText("Select");
        sgnselector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sgnselectorActionPerformed(evt);
            }
        });
        jPanel1.add(sgnselector, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 110, -1, -1));

        pbkSelector.setText("Select");
        pbkSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pbkSelectorActionPerformed(evt);
            }
        });
        jPanel1.add(pbkSelector, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 70, -1, -1));

        mssgFileSelector.setText("Select");
        mssgFileSelector.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mssgFileSelectorMouseClicked(evt);
            }
        });
        mssgFileSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mssgFileSelectorActionPerformed(evt);
            }
        });
        jPanel1.add(mssgFileSelector, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 30, -1, -1));

        verifier.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        verifier.setForeground(new java.awt.Color(0, 0, 255));
        verifier.setText("Verify");
        verifier.setMaximumSize(new java.awt.Dimension(90, 30));
        verifier.setMinimumSize(new java.awt.Dimension(90, 30));
        verifier.setPreferredSize(new java.awt.Dimension(90, 30));
        verifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifierActionPerformed(evt);
            }
        });
        jPanel1.add(verifier, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 150, 150, 50));

        vResultLabel.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        vResultLabel.setText("Verification result:");
        jPanel1.add(vResultLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 600, 50));

        jTabbedPane1.addTab("verfying signature", jPanel1);

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        msgFileLabel.setText("File (message)");
        jPanel2.add(msgFileLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        msgPathTField.setEditable(false);
        msgPathTField.setText("Select the message file");
        msgPathTField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                msgPathTFieldMouseClicked(evt);
            }
        });
        jPanel2.add(msgPathTField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, 400, -1));

        filesLabel.setText("Signature Dest.");
        jPanel2.add(filesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        signPathTField.setEditable(false);
        signPathTField.setText("Select a destination folder to save signature file");
        signPathTField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                signPathTFieldMouseClicked(evt);
            }
        });
        jPanel2.add(signPathTField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, 400, -1));

        sResultLabel.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        sResultLabel.setText("Signature Generation Result:   ");
        jPanel2.add(sResultLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 200, 600, 50));

        msgFileSelector.setText("Select");
        msgFileSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msgFileSelectorActionPerformed(evt);
            }
        });
        jPanel2.add(msgFileSelector, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 30, -1, -1));

        sgnPathSelector.setText("Select");
        sgnPathSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sgnPathSelectorActionPerformed(evt);
            }
        });
        jPanel2.add(sgnPathSelector, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 110, -1, -1));

        signer.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        signer.setForeground(new java.awt.Color(0, 0, 255));
        signer.setText("Sign");
        signer.setMaximumSize(new java.awt.Dimension(90, 30));
        signer.setMinimumSize(new java.awt.Dimension(90, 30));
        signer.setPreferredSize(new java.awt.Dimension(90, 30));
        signer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signerActionPerformed(evt);
            }
        });
        jPanel2.add(signer, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 150, 150, 50));

        jLabel8.setText("Select files destinations:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jLabel9.setText("Private Key Source");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        pvkPathTField.setEditable(false);
        pvkPathTField.setText("Select the private key file");
        pvkPathTField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pvkPathTFieldMouseClicked(evt);
            }
        });
        jPanel2.add(pvkPathTField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 400, -1));

        pvkFileSelector.setText("Select");
        pvkFileSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pvkFileSelectorActionPerformed(evt);
            }
        });
        jPanel2.add(pvkFileSelector, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 70, -1, -1));

        jTabbedPane1.addTab("generating signature", jPanel2);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pbkSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pbkSelectorActionPerformed
        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        fileChooser.setCurrentDirectory(new java.io.File("."));
        fileChooser.setDialogTitle("Select the public key file");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        if (fileChooser.showOpenDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
            pbkPathTField.setText(fileChooser.getSelectedFile().getPath());
            try {

                pbkFile = new File(fileChooser.getSelectedFile().getPath());

            } catch (Exception e) {
                javax.swing.JOptionPane.showMessageDialog(this, "The selected public key file could not be accessed", "ERROR_MESSAGE", javax.swing.JOptionPane.ERROR_MESSAGE);
                pbkPathTField.setText("Select the public key file");

            }
        }
    }//GEN-LAST:event_pbkSelectorActionPerformed

    private void mssgFileSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mssgFileSelectorActionPerformed
        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        fileChooser.setCurrentDirectory(new java.io.File("."));
        fileChooser.setDialogTitle("Select the file containing the message");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        if (fileChooser.showOpenDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
            mssgPathTField.setText(fileChooser.getSelectedFile().getPath());
            try {

                msgFile = new File(fileChooser.getSelectedFile().getPath());

            } catch (Exception e) {
                javax.swing.JOptionPane.showMessageDialog(this, "The selected message file could not be accessed", "ERROR_MESSAGE", javax.swing.JOptionPane.ERROR_MESSAGE);
                mssgPathTField.setText("Select the message file");

            }
        }
    }//GEN-LAST:event_mssgFileSelectorActionPerformed

    private void sgnselectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sgnselectorActionPerformed

        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        fileChooser.setCurrentDirectory(new java.io.File("."));
        fileChooser.setDialogTitle("Select a destination directory to save the digital signature files");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        if (fileChooser.showOpenDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {

            try {

                sgnFile = new File(fileChooser.getSelectedFile().getPath());
                signPathTField.setText(fileChooser.getSelectedFile().getPath());

            } catch (Exception e) {
                javax.swing.JOptionPane.showMessageDialog(this, "The selected signature file could not be accessed", "ERROR_MESSAGE", javax.swing.JOptionPane.ERROR_MESSAGE);
                signPathTField.setText("Select a destination folder to save signature file");
            }
        }
    }//GEN-LAST:event_sgnselectorActionPerformed


    private void verifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifierActionPerformed
        vResultLabel.setForeground(Color.BLACK);
        vResultLabel.setText("Verification Result:   ");
        if (msgFile == null || pbkFile == null || sgnFile == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "One or all of the files could not be accessed or created", "ERROR_MESSAGE", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!msgFile.exists() || !pbkFile.exists() || !sgnFile.exists()) {
            javax.swing.JOptionPane.showMessageDialog(this, "One or all of the files could not be accessed or created", "ERROR_MESSAGE", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        Verifier v = new Verifier();
        if (v.verify(msgFile, pbkFile, sgnFile)) {
            vResultLabel.setForeground(Color.BLUE);
            vResultLabel.setText(vResultLabel.getText() + " The selected file was successfully verified");
        } else {
            sResultLabel.setForeground(Color.RED);
            sResultLabel.setText(sResultLabel.getText() + " The signature of the selected file  could not be verified");
        }
    }//GEN-LAST:event_verifierActionPerformed

    private void signerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signerActionPerformed

        if (msgFile == null || pvkFile == null || sgnFile == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "At least one of the previous files was not selected", "ERROR_MESSAGE", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!msgFile.exists() || !pvkFile.exists() || !sgnFile.exists()) {
            javax.swing.JOptionPane.showMessageDialog(this, "One or all of the files could not be accessed or created", "ERROR_MESSAGE", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        Signer s = new Signer();
        if (s.sign(msgFile, pvkFile, sgnFile)) {
            sResultLabel.setForeground(Color.BLUE);
            sResultLabel.setText("Signature Generation Result:   " + " The selected file was successfully signed");
        } else {
            sResultLabel.setForeground(Color.RED);
            sResultLabel.setText("Signature Generation Result:   " + " Signing the selected file failed");
        }
    }//GEN-LAST:event_signerActionPerformed

    private void sgnPathSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sgnPathSelectorActionPerformed
        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        fileChooser.setCurrentDirectory(new java.io.File("."));
        fileChooser.setDialogTitle("Select a destination directory to save the digital signature files");
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        if (fileChooser.showOpenDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {

            try {

                sgnFile = new File(fileChooser.getSelectedFile().getPath() + "//signature.sgn");
                sgnFile.createNewFile();
                signPathTField.setText(fileChooser.getSelectedFile().getPath());

            } catch (Exception e) {
                javax.swing.JOptionPane.showMessageDialog(this, "The signature file could not be created  in the selected directory", "ERROR_MESSAGE", javax.swing.JOptionPane.ERROR_MESSAGE);
                signPathTField.setText("Select a destination folder to save signature file");

            }
        }

    }//GEN-LAST:event_sgnPathSelectorActionPerformed

    private void msgFileSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msgFileSelectorActionPerformed
        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        fileChooser.setCurrentDirectory(new java.io.File("."));
        fileChooser.setDialogTitle("Select the file containing the message");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        if (fileChooser.showOpenDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
            msgPathTField.setText(fileChooser.getSelectedFile().getPath());
            try {

                msgFile = new File(fileChooser.getSelectedFile().getPath());

            } catch (Exception e) {
                javax.swing.JOptionPane.showMessageDialog(this, "The selected file could not be accessed", "ERROR_MESSAGE", javax.swing.JOptionPane.ERROR_MESSAGE);
                msgPathTField.setText("Select the message file");

            }
        }

    }//GEN-LAST:event_msgFileSelectorActionPerformed

    private void keysPathSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keysPathSelectorActionPerformed
        // TODO add your handling code here:

        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        fileChooser.setCurrentDirectory(new java.io.File("."));
        fileChooser.setDialogTitle("Select a destination directory to save the keys' files");
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        if (fileChooser.showOpenDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {

            keysPathTField.setText(fileChooser.getSelectedFile().getPath());
            try {
                pbkFile = new File(fileChooser.getSelectedFile().getPath() + "//publick_key.key");
                pvkFile = new File(fileChooser.getSelectedFile().getPath() + "//private_key.key");

                /*int notificaton = javax.swing.JOptionPane.OK_OPTION;

                 if (pvkFile.exists() || pbkFile.exists()) {
                 notificaton = javax.swing.JOptionPane.showConfirmDialog(this, "Previous keys' files were found\n"
                 +"One or all of them will be replaced"
                 + "\n All previous signature will be invalid as new keys will be generated",
                 "WARNING_MESSAGE", javax.swing.JOptionPane.WARNING_MESSAGE);
                 }

                 if (notificaton == javax.swing.JOptionPane.CANCEL_OPTION) {
                 javax.swing.JOptionPane.showMessageDialog(this, "Keys generation did not complete", "WARNING_MESSAGE", javax.swing.JOptionPane.WARNING_MESSAGE);
                 return;
                 }
                
                 pbkFile.delete();
                 pvkFile.delete();

                 pbkFile.createNewFile();
                 pvkFile.createNewFile();*/
            } catch (Exception e) {
                javax.swing.JOptionPane.showMessageDialog(this, "One or all of the files could not be created", "ERROR_MESSAGE", javax.swing.JOptionPane.ERROR_MESSAGE);
                keysPathTField.setText("select a destination folder to save files");
            }

        }
    }//GEN-LAST:event_keysPathSelectorActionPerformed

    private void keysGeneratorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keysGeneratorActionPerformed
        // TODO add your handling code here:
        try {

            if (pvkFile == null || pbkFile == null) {
                javax.swing.JOptionPane.showMessageDialog(this, "Select a destination directory to store the keys pair befor geneerate the keys", "ERROR_MESSAGE", javax.swing.JOptionPane.ERROR_MESSAGE);
                keysPathSelector.requestFocusInWindow();
                return;
            }

            //warning pefor overwrite any previous key file
            int notificaton = javax.swing.JOptionPane.OK_OPTION;

            if (pvkFile.exists() || pbkFile.exists()) {
                notificaton = javax.swing.JOptionPane.showConfirmDialog(this, "Previous keys' files were found\n"
                        + "One or all of them will be replaced"
                        + "\n All previous signature will be invalid as new keys will be generated",
                        "WARNING_MESSAGE", javax.swing.JOptionPane.WARNING_MESSAGE);
                if (notificaton == javax.swing.JOptionPane.CANCEL_OPTION) {
                    javax.swing.JOptionPane.showMessageDialog(this, "Keys generation did not complete", "WARNING_MESSAGE", javax.swing.JOptionPane.WARNING_MESSAGE);
                    return;
                } else {

                    pbkFile.delete();
                    pvkFile.delete();

                    pbkFile.createNewFile();
                    pvkFile.createNewFile();
                }
            } else {

                if (!pvkFile.exists() || !pbkFile.exists()) {
                    pbkFile.createNewFile();
                    pvkFile.createNewFile();
                }
            }

            KeysGenerator kg = new KeysGenerator();
            if (kg.generateKeys(pbkFile, pvkFile)) {
                javax.swing.JOptionPane.showMessageDialog(this, "Keys pair were generated successfully to the selected directory", "WARNING_MESSAGE", javax.swing.JOptionPane.WARNING_MESSAGE);
                genResultLabel.setForeground(Color.BLUE);
                genResultLabel.setText("Keys Pair Generation Result:   " + "Keys were generated successfully to the selected directory");
            }

        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Failed to generate the keys pair du to files access failer", "ERROR_MESSAGE", javax.swing.JOptionPane.ERROR_MESSAGE);
            genResultLabel.setForeground(Color.RED);
            genResultLabel.setText("Keys Pair Generation Result:   " + "Failed to generate the keys pair");
        }


    }//GEN-LAST:event_keysGeneratorActionPerformed

    private void pvkFileSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pvkFileSelectorActionPerformed

        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        fileChooser.setCurrentDirectory(new java.io.File("."));
        fileChooser.setDialogTitle("Select the private key file");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        if (fileChooser.showOpenDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
            pvkPathTField.setText(fileChooser.getSelectedFile().getPath());
            try {

                pvkFile = new File(fileChooser.getSelectedFile().getPath());

            } catch (Exception e) {
                javax.swing.JOptionPane.showMessageDialog(this, "The selected file could not be accessed", "ERROR_MESSAGE", javax.swing.JOptionPane.ERROR_MESSAGE);
                pvkPathTField.setText("Select the private key file");

            }
        }


    }//GEN-LAST:event_pvkFileSelectorActionPerformed

    private void keysPathTFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_keysPathTFieldMouseClicked
        // TODO add your handling code here:
        keysPathSelectorActionPerformed(null);
    }//GEN-LAST:event_keysPathTFieldMouseClicked

    private void msgPathTFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_msgPathTFieldMouseClicked
        // TODO add your handling code here:
        msgFileSelectorActionPerformed(null);
    }//GEN-LAST:event_msgPathTFieldMouseClicked

    private void pvkPathTFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pvkPathTFieldMouseClicked
        // TODO add your handling code here:
        pvkFileSelectorActionPerformed(null);
    }//GEN-LAST:event_pvkPathTFieldMouseClicked

    private void signPathTFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signPathTFieldMouseClicked
        // TODO add your handling code here:
        sgnPathSelectorActionPerformed(null);
    }//GEN-LAST:event_signPathTFieldMouseClicked

    private void mssgFileSelectorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mssgFileSelectorMouseClicked
        // TODO add your handling code here:
        mssgFileSelectorActionPerformed(null);
    }//GEN-LAST:event_mssgFileSelectorMouseClicked

    private void pbkPathTFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pbkPathTFieldMouseClicked
        // TODO add your handling code here:
        pbkSelectorActionPerformed(null);
    }//GEN-LAST:event_pbkPathTFieldMouseClicked

    private void sgnPathTFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sgnPathTFieldMouseClicked
        // TODO add your handling code here:
        sgnselectorActionPerformed(null);
    }//GEN-LAST:event_sgnPathTFieldMouseClicked

    private void mssgPathTFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mssgPathTFieldMouseClicked
        // TODO add your handling code here:
        mssgFileSelectorActionPerformed(null);
    }//GEN-LAST:event_mssgPathTFieldMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DSV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DSV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DSV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DSV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DSV().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel filesLabel;
    private javax.swing.JLabel genResultLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton keysGenerator;
    private javax.swing.JButton keysPathSelector;
    private javax.swing.JTextField keysPathTField;
    private javax.swing.JLabel msgFileLabel;
    private javax.swing.JButton msgFileSelector;
    private javax.swing.JTextField msgPathTField;
    private javax.swing.JButton mssgFileSelector;
    private javax.swing.JTextField mssgPathTField;
    private javax.swing.JTextField pbkPathTField;
    private javax.swing.JButton pbkSelector;
    private javax.swing.JButton pvkFileSelector;
    private javax.swing.JTextField pvkPathTField;
    private javax.swing.JLabel sResultLabel;
    private javax.swing.JButton sgnPathSelector;
    private javax.swing.JTextField sgnPathTField;
    private javax.swing.JButton sgnselector;
    private javax.swing.JTextField signPathTField;
    private javax.swing.JButton signer;
    private javax.swing.JLabel vResultLabel;
    private javax.swing.JButton verifier;
    // End of variables declaration//GEN-END:variables
}
